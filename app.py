from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import subprocess
import asyncio
import concurrent.futures
import os
import urllib.request
import time


class MyURL(BaseModel):
    url: str

app = FastAPI(
     title="VulScan"
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def index():
    return "Hello World"
    
@app.post("/whois")
def whois(myurl:MyURL):
	process = subprocess.Popen(['whois', myurl.url ,'-H'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = process.communicate()
	return out
	
@app.post("/whatweb")
def whatweb(myurl:MyURL):
	process = subprocess.Popen(['whatweb', myurl.url], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = process.communicate()
	return out

@app.post("/scan")
def get_student(item:MyURL):
    return item.url

          
          
          
async def stream_output(proc, websocket):
    while True:
        output = await asyncio.get_event_loop().run_in_executor(None, proc.stdout.readline)
        if output == b'' and proc.poll() is not None:
            break
        else:
            #print(output)
            await websocket.send_text(output.decode().strip())
          
      
 
          
@app.websocket("/scanfile")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    file_url = await websocket.receive_text()
    
    # Get the current epoch time
    epoch_time = int(time.time())
    
    # Create a directory with the epoch time as the name
    dir_path = f"./temp/{epoch_time}/"
    os.makedirs(dir_path)
    
    # Download the file to the directory
    file_name = os.path.basename(file_url)
    file_path = os.path.join(dir_path, file_name)
    
    urllib.request.urlretrieve(file_url, file_path)

    cmd = f"clamscan {file_path}"
    
    await websocket.send_text("Started File Scan")
    await websocket.send_text("Scanning ...")
    
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)

    # Stream the output line by line over the WebSocket
    await asyncio.create_task(stream_output(proc, websocket))

    # Close the subprocess and the WebSocket connection
    proc.kill()
    await websocket.close()
    
    
    
@app.websocket("/nmap")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    web_url = await websocket.receive_text()
    
    cmd = f"nmap {web_url}"
    
    await websocket.send_text("Started Nmap")
    await websocket.send_text("Scanning for Open Ports ...")
    
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)

    # Stream the output line by line over the WebSocket
    await asyncio.create_task(stream_output(proc, websocket))

    # Close the subprocess and the WebSocket connection
    proc.kill()
    await websocket.close()
          
          
          


@app.websocket("/nikto/{url}")
async def websocket_endpoint(url:str, websocket: WebSocket):
    await websocket.accept()

    # Run the terminal command and capture its output
    #cmd = "wapiti -u http://128.198.49.198:8102/mutillidae"
    cmd = f"nikto -h {url}"
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)

    # Stream the output line by line over the WebSocket
    await asyncio.create_task(stream_output(proc, websocket))

    # Close the subprocess and the WebSocket connection
    proc.kill()
    await websocket.close()
    
    
@app.websocket("/niktoreport")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    web_url = await websocket.receive_text()
    
    epoch_time = int(time.time())
    # Run the terminal command and capture its output
    #cmd = "wapiti -u http://128.198.49.198:8102/mutillidae"
    
    
    dir_path = f"./niktoreport/{epoch_time}/"
    os.makedirs(dir_path)
    
    report_url = dir_path + 'report.html'
    
    cmd = f"nikto -h {web_url} -o {report_url} -maxtime 60s"
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)

    # Stream the output line by line over the WebSocket
    await asyncio.create_task(stream_output(proc, websocket))

    # Close the subprocess and the WebSocket connection
    proc.kill()
    
    download_url = f'/download/niktoreport/{epoch_time}/report.html'
    await websocket.send_text(download_url)
    
    await websocket.close()


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        await websocket.send_text("Hello")
        process = subprocess.Popen(
            "nikto -h http://128.198.49.198:8102/mutillidae",
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
        )
        while True:
            output = process.stdout.readlines()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output)
                await websocket.send_text(output)
            
            
            
            
    except Exception as e:
        await websocket.send_text(str(e))
    finally:
        process.kill()

